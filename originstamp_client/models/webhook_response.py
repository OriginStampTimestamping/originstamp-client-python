# coding: utf-8

"""
    OriginStamp Client

    OpenAPI spec version: 3.0
    OriginStamp Documentation: https://docs.originstamp.com
    Contact: mail@originstamp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebhookResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'int',
        'executed': 'bool',
        'hash': 'str',
        'success': 'bool',
        'tries': 'int'
    }

    attribute_map = {
        'currency': 'currency',
        'executed': 'executed',
        'hash': 'hash',
        'success': 'success',
        'tries': 'tries'
    }

    def __init__(self, currency=None, executed=None, hash=None, success=None, tries=None):  # noqa: E501
        """WebhookResponse - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._executed = None
        self._hash = None
        self._success = None
        self._tries = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if executed is not None:
            self.executed = executed
        if hash is not None:
            self.hash = hash
        if success is not None:
            self.success = success
        if tries is not None:
            self.tries = tries

    @property
    def currency(self):
        """Gets the currency of this WebhookResponse.  # noqa: E501

        Currency for which the webhook is triggered, e.g.  0: Bitcoin 1: Ethereum  # noqa: E501

        :return: The currency of this WebhookResponse.  # noqa: E501
        :rtype: int
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this WebhookResponse.

        Currency for which the webhook is triggered, e.g.  0: Bitcoin 1: Ethereum  # noqa: E501

        :param currency: The currency of this WebhookResponse.  # noqa: E501
        :type: int
        """

        self._currency = currency

    @property
    def executed(self):
        """Gets the executed of this WebhookResponse.  # noqa: E501

        Shows if the webhook was executed.  # noqa: E501

        :return: The executed of this WebhookResponse.  # noqa: E501
        :rtype: bool
        """
        return self._executed

    @executed.setter
    def executed(self, executed):
        """Sets the executed of this WebhookResponse.

        Shows if the webhook was executed.  # noqa: E501

        :param executed: The executed of this WebhookResponse.  # noqa: E501
        :type: bool
        """

        self._executed = executed

    @property
    def hash(self):
        """Gets the hash of this WebhookResponse.  # noqa: E501

        The submitted hash in hex representation.  # noqa: E501

        :return: The hash of this WebhookResponse.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this WebhookResponse.

        The submitted hash in hex representation.  # noqa: E501

        :param hash: The hash of this WebhookResponse.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def success(self):
        """Gets the success of this WebhookResponse.  # noqa: E501

        Indicates whether the webhook was executed successfully or not.  # noqa: E501

        :return: The success of this WebhookResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this WebhookResponse.

        Indicates whether the webhook was executed successfully or not.  # noqa: E501

        :param success: The success of this WebhookResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def tries(self):
        """Gets the tries of this WebhookResponse.  # noqa: E501

        Returns the number of tries for the webhook execution.  # noqa: E501

        :return: The tries of this WebhookResponse.  # noqa: E501
        :rtype: int
        """
        return self._tries

    @tries.setter
    def tries(self, tries):
        """Sets the tries of this WebhookResponse.

        Returns the number of tries for the webhook execution.  # noqa: E501

        :param tries: The tries of this WebhookResponse.  # noqa: E501
        :type: int
        """

        self._tries = tries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
