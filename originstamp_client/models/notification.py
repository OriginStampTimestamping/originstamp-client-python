# coding: utf-8

"""
    OriginStamp Client

    OpenAPI spec version: 3.0
    OriginStamp Documentation: https://docs.originstamp.com
    Contact: mail@originstamp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'int',
        'notification_type': 'int',
        'target': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'notification_type': 'notification_type',
        'target': 'target'
    }

    def __init__(self, currency=None, notification_type=None, target=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._notification_type = None
        self._target = None
        self.discriminator = None

        self.currency = currency
        self.notification_type = notification_type
        self.target = target

    @property
    def currency(self):
        """Gets the currency of this Notification.  # noqa: E501

        0: Bitcoin  # noqa: E501

        :return: The currency of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Notification.

        0: Bitcoin  # noqa: E501

        :param currency: The currency of this Notification.  # noqa: E501
        :type: int
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def notification_type(self):
        """Gets the notification_type of this Notification.  # noqa: E501

        0: notify via email  1: notify a webhook  # noqa: E501

        :return: The notification_type of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this Notification.

        0: notify via email  1: notify a webhook  # noqa: E501

        :param notification_type: The notification_type of this Notification.  # noqa: E501
        :type: int
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def target(self):
        """Gets the target of this Notification.  # noqa: E501

        Depending on the notification type, specify the target for the notification (e.g. mail address or webhook URL). The webhook URL will receive a POST request after timestamp was successfully created.  # noqa: E501

        :return: The target of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Notification.

        Depending on the notification type, specify the target for the notification (e.g. mail address or webhook URL). The webhook URL will receive a POST request after timestamp was successfully created.  # noqa: E501

        :param target: The target of this Notification.  # noqa: E501
        :type: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
